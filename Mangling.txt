инструмент Mangling критерии использования по принципам объектно-ориентированного программирования языка Python

В объектно-ориентированном программировании на языке Python существует концепция манглинга (name mangling),
 которая используется для создания "частных" атрибутов в классах.
Манглинг имен — это механизм, который изменяет имена атрибутов, чтобы сделать их менее доступными из внешнего кода
 и избежать конфликтов имен в подклассах. Это достигается путем добавления префикса `_ClassName` к имени атрибута.

Вот основные критерии и правила использования манглинга имен в Python:

1. **Двойное подчеркивание перед именем**:
   Если вы хотите сделать атрибут "частным" (то есть, недоступным напрямую из вне класса),
    вы должны использовать двойное подчеркивание перед его именем:
   ```python
   class MyClass:
       def __init__(self):
           self.__private_attr = 42
   ```

2. **Изменение имени**:
   Python автоматически изменяет имя атрибута, добавляя к нему префикс `_ClassName`,
    чтобы сделать его менее доступным:
   ```python
   obj = MyClass()
   print(obj.__dict__)  # {'_MyClass__private_attr': 42}
   ```

3. **Доступ к манглированным атрибутам**:
   Хотя манглинг имен делает атрибуты менее доступными, это не делает их полностью недоступными.
   Вы все еще можете получить доступ к таким атрибутам, используя их измененные имена:
   ```python
   print(obj._MyClass__private_attr)  # 42
   ```

4. **Использование в наследовании**:
   Манглинг имен помогает избежать конфликтов имен в подклассах.
   Например:
   ```python
   class Base:
       def __init__(self):
           self.__hidden = "Base"

   class Derived(Base):
       def __init__(self):
           super().__init__()
           self.__hidden = "Derived"

   obj = Derived()
   print(obj.__dict__)  # {'_Base__hidden': 'Base', '_Derived__hidden': 'Derived'}
   ```

5. **Не путать с одиночным подчеркиванием**:
   Одиночное подчеркивание (например, `_attr`) используется для обозначения "защищенных" атрибутов,
    которые не должны использоваться вне класса и его подклассов,
     но это всего лишь соглашение и не обеспечивает никакой реальной защиты:
   ```python
   class MyClass:
       def __init__(self):
           self._protected_attr = "Protected"
   ```

6. **Не использовать манглинг без необходимости**:
   Манглинг имен используется редко и только тогда, когда это действительно необходимо для предотвращения конфликтов имен
    или для обеспечения скрытия реализации.
   В большинстве случаев достаточно использовать одиночное подчеркивание.

Пример использования манглинга имен:

```python
class BankAccount:
    def __init__(self, initial_balance):
        self.__balance = initial_balance  # Приватный атрибут

    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount

    def get_balance(self):
        return self.__balance

account = BankAccount(100)
account.deposit(50)
print(account.get_balance())  # 150
# print(account.__balance)  # AttributeError: 'BankAccount' object has no attribute '__balance'
print(account._BankAccount__balance)  # 150 (доступ через манглированное имя)
```

Следуя этим критериям, вы сможете эффективно использовать манглинг имен в Python
 для управления доступом к атрибутам и предотвращения конфликтов имен.
